# -*- coding: utf-8 -*-
# -*- mode: org -*-
# -*- org-export-babel-evaluate: nil -*-
# -- org-startup-with-inline-images: nil --
# -*- org-image-actual-width: nil; -*-
#+TITLE: Atividade Didática
#+AUTHOR: Lucas Leandro Nesi
#+EMAIL: lucas.nesi@inf.ufrgs.br
#+DATE: September 1, 2019
#+STARTUP: overview indent noinlineimages
#+LANGUAGE: pt-br
#+OPTIONS: H:3 creator:nil timestamp:nil skip:nil toc:nil num:t ^:nil ~:~
#+OPTIONS: author:nil title:nil date:nil
#+TAGS: noexport(n) deprecated(d) ignore(i)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Skiped: Introdução (Isso abrange os tópicos N=3..5 [Semana 2])
** Estrutura
- Motivação: Você quer que o computador faça as coisas por você :)
- Programa em C:
  - Função Main
  - Blocos de código
  - Variáveis
    - Números
      - Inteiros: Int
      - Reais: Float/Double
    - Texto: char
  - Expressões aritméticas
    - Operadores: + - / *
  - Bibliotecas
  - Imprimindo/Lendo Valores
- Exemplo: https://www.urionlinejudge.com.br/judge/pt/problems/view/1001

* Seleção (Isso abrange os tópicos N=6..8 [Semana 3])
** Estrutura
- Motivação: Programa tomando decisões, executando código dependendo
  dos dados
- Expressões Lógicas/Comparações
  - Operadores == >= <= != ! && ||
- Comando if
- Comando else
- Comando else if

- Example: https://www.urionlinejudge.com.br/judge/pt/problems/view/1035

** Roteiro
Slide 0:
- [Apresentar-se]
- Nesta video-aula será apresentado o comando de seleção
- [Passar Slide]

Slide 1:
- Em algumas situações, nós vamos querer que o computador tome
  *decisões*, e execute código dependendo dos valores das variáveis.
- Desta maneira, nós desejamos executar algumas operações *somente se*
  uma condição é satisfeita.
- [Passar Slide/Transição]
- O exemplo mais clássico é um programa que verifica se um aluno
  passou ou não em uma disciplina. Se sua nota final é igual ou maior
  que 6.
- Então basicamente, o programa vai receber a nota, e *SE* esse número
  for igual ou maior que 6, o programa imprime "aprovado", caso
  contrario imprimir "reprovado".
- [Passar Slide]

Slide 2:
- Vocês já sabem como criar um programa em C, [Transição], declarar
  variáveis, [Transição], e ler e escrever.
- Quando a gente pensa sobre este algoritmo, depois de receber a nota,
  o primeiro passo é realizar uma operação de comparação, verificando
  se um número é maior ou igual a outro.
- [Passar Slide]

Slide 3:
- Para fazer isso, vamos usar os operadores relacionais, também
  chamados operadores de comparação.
- As operações relacionais em C são
 - IGUAL, DIFERENTE, MAIOR, MAIOR IGUAL, MENOR, MENOR IGUAL 
- Essas operações são aplicadas em duas variáveis, portanto são
  chamados operadores binários, e retornam um valor lógico, que no
  caso do C é 0 para falso e 1 para verdadeiro.
- [Passar Slide/Transição]
- Ainda, podemos realizar operações lógicas com esses resultados,
  usando os operadores lógicos.
- As operações lógicas em C são
 - Negação, E, Ou
- [Passar Slide/Transição]
- Então, no nosso exemplo anterior, nós queremos verificar se nossa
  nota é maior ou igual a 6.
- Agora, se essa condição for verdadeira, nós queremos imprimir
  aprovado
- [Passar Slide]

Slide 4:
- Para fazer isso, nós usamos o comando IF do C, que é composto por:
  - a keyword if, seguido por uma expressão lógica dentro de parâneses
  - seguido por um bloco de código que só vai ser executado se a
    expressão for verdadeira.
- [Passar Slide]

Slide 5:
- No nosso exemplo das notas, queremos ler um número e imprimir
  baseado numa condição.
- Esse código aqui já declara a variável nota e lê ela
- Agora devemos usar o comando IF para realizar a condição
- [Passar Slide/Transição]
- Primeiramente escrevemos if, 
- Depois, Nossa condição, nota maior ou igual à 6, dentro de parênteses,
- Então abrimos nosso bloco de código que só vai executar se a
  condição for verdadeira
- [Passar Slide/Transição]
- E por último dentro do bloco, utilizamos o printf Aprovado!
- [Passar Slide]

Slide 6:
- Caso também quisermos executar um código no caso contrário, ou seja
  Nota menor que 6, a gente usa a construção IF ELSE.
- A construção é similar ao do if, só que adicionamos a palavra
  reservada else após o bloco do if.
- Este segundo bloco vai executar caso a condição seja falsa
- [Passar Slide]

Slide 7:
- Voltando ao nosso exemplo das notas, caso quisermos imprimir
  reprovado caso a nota seja menor que 6, precisamos usar o else.
- Aqui temos nosso programa anterior que somente imprime aprovado se
  nota maior igual a 6.
- [Passar Slide/Transição]
- Então adicionamos o else e seu bloco
- [Passar Slide/Transição]
- E adicionamos o printf reprovado
- Podemos ler esse código como: 
- Se nota for maior ou igual a 6, Imprimi aprovado,
- SENÃO Imprimi reprovado
- [Passar Slide]

Slide 8:
- Ainda, em alguns casos podemos precisar de várias condições. Por
  exemplo, e se existe um caso especial entre a Nota 5 e 6?,
  ou uma recuperação?
- Devemos então usar a construção else if que adiciona uma condição
  nova para um novo bloco de código.
- A construção é idêntica ao if, só que aqui adicionamos as palavras
  reservadas else e if, separadas por espaço com uma nova expressão
  lógica, e enfim seguida por um bloco que vai ser executado caso
  aquela condição é verdadeira.
- Após o else if podemos colocar outro else if, um else ou acabar o
  comando if. Neste caso aqui, temos somente um else para capturar
  quando as condições anteriores não foram verdadeiras.
- Vale lembrar que no caso de if, e vários else if, as condições são
  testadas somente enquanto as condições anteriores forem falsas.
- Após a execução de um destes blocos de código, o comando if else se
  termina, passando a execução para o próximo comando.
- [Passar Slide]

Slide 9:
- Assim, no nosso exemplo de notas, podemos ter o caso especial com
  nota maior igual a cinco e nota menor que 6.
- Usamos o else if com essa condição para imprimir recuperação
- Assim, se a nota for 8, o programa imprimi aprovado
- Se nota for 5,5 o programa imprime recuperação
- Se a nota for 4 o programa imprime reprovado
- [Passar Slide]

Slide 10:
- Nesta video-aula foi apresentado o comando de seleção IF
- [Dar um tchau simpático]
- [Terminar apresentação]

* Skiped: Switch-Case (Isso abrange os tópicos N=9/11 [Semana 4])
- Motivação: Comparar uma única variável com constantes
- Comando Switch
- Example: Mapas... (Estou em, devo passar por)
- Comando break
- Example: https://www.urionlinejudge.com.br/judge/pt/problems/view/1038

* Repetição For (Isso abrange os tópicos N=10..12 [Semana 4/5])
** Estrutura
- Motivação: Programa repetindo operações sem necessidade de cópias de
  código
- Exemplo: Encontrar o menor valor
- Comando for
- Exemplo com iteração por iteração
** Roteiro
*** Setup
#+BEGIN_SRC emacs-lisp
;;http://pragmaticemacs.com/emacs/scrolling-and-moving-by-line/
;;keep cursor at same position when scrolling
(setq scroll-preserve-screen-position 1)
;;scroll window up/down by one line
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+END_SRC

#+RESULTS:
: [21 49 134217846]

*** DONE Slide 0:
- [Apresentar-se]
- Nesta video-aula será apresentado o comando de repetição for
- [Passar Slide]

*** DONE Slide 1:
Neste momento do curso, vocês já sabem como criar um programa em C,
declarar variáveis, ler e escrever, *[Passar Slide/Transição]*, e
também, usar comandos de seleção com expressões lógicas e de
comparação. Entretanto, se for necessário realizar repetições de
código, precisamos aprender um novo comando
*** DONE Slide 2:
Um dos usos mais recorrentes da programação é a automatização de ações
repetidas. Nestas situações, a ação é a mesma, ou seja, nosso código é
o mesmo, apenas mudando os valores de entrada. Idealmente, não
repetimos a escrita de código, usaremos os comandos de repetição da
linguagem de programação. *[Passar Slide/Transição]* Um exemplo simples
é: como ler 10 números e encontrar o menor? Claro que você pode
declarar 10 variáveis e escrever 10 scanfs, mas imagine em casos com
muitas repetições, ou até com um número indeterminado delas. Por isso,
vamos aprender o comando de repetição for da Linguagem C.
*** DONE Slide 3:
O comando de repetição for do C é composto por: a palavra-chave for,
seguido por parênteses. Dentro dos parênteses, temos três componentes
separados por ponto e virgula. Primeiro, o Comando de inicialização;
Segundo, a Expressão de Teste, e por último, o Comando de
atualização. E finalmente, claro, o bloco de código que vai ser
repetido. *[Passar Slide]*

*** DONE Slide 4:
O Comando de inicialização é executado apenas uma vez quando o
programa começa o for. Então, a expressão de teste é verificada, e
caso verdadeira, o bloco é executado. No final do bloco, os comandos
de atualização são executados. O teste é verificado novamente, e caso
verdadeiro, o processo se repete. Caso falso, o comando for termina e
o programa continua. *[Passar Slide]*
*** DONE Slide 5:
Vamos ver isso na prática, imprimindo os números de 0 à 10. Podemos
guardar o número atual na variável i. Queremos imprimir esse valor e
realizar uma soma repetidamente, incrementando i de um em um. *[Passar
Slide/Transição]* Usamos então o comando for. *[Passar
Slide/Transição]*. Nosso bloco de código é simplesmente um printf da
variável i.  *[Passar Slide/Transição]* Inicialmente, a variável i é 0,
o primeiro número a ser impresso. Usamos isso como nosso comando de
inicialização. *[Passar Slide/Transição]* Nós gostaríamos de imprimir
somente até o número 10, ou seja, enquanto i for menor ou igual a 10
podemos executar nosso bloco. Então, definimos nossa expressão de
teste como i<=10. *[Passar Slide/Transição]* Cada vez que o bloco do
comando for ser executado, incrementamos a variável i em 1, utilizado
o comando de atualização. Esse simples código já imprimi os valores de
0 à 10.  Vamos ver agora a execução passo a passo. *[Passar Slide]*
*** DONE Slide 6:
Primeiramente o programa declara a variável i. *[Passar
Slide/Transição]*. O comando for começa, e a variável i é atribuída
à 0.  *[Passar Slide/Transição]* O teste é realizado, e como i é menor
ou igual a 10, o bloco deve ser executado. *[Passar Slide/Transição]* O
bloco começa a ser executado, e o printf vai imprimir i, que
atualmente é 0. *[Passar Slide/Transição]* O bloco termina, então, o
comando de atualização é executado. Incrementamos em 1 a váriavel
i. Realizamos o teste novamente, agora i é 1, mas ainda é menor ou
igual a 10, logo o bloco deve ser executado de novo. *[Passar
Slide/Transição]*.  Vamos para o printf, que imprimi o valor de i que
atualmente é 1. *[Passar Slide/Transição]* O bloco termina e vamos
realizar o comando de atualização. A variável i agora tem o
valor 2. *[Passar Slide/Transição]* Isso continua até o comando de
atualização incrementar i de 10 para 11. O teste então é realizado, e
agora como i é 11, e 11 não é menor ou igual a 10, o teste retorna
falso, logo o bloco não deve ser executado. *[Passar Slide/Transição]*
Então o comando for termina, e o programa segue seu fluxo de execução.
*[Passar Slide]*

*** DONE Slide 7:
Vamos ver o seguinte exemplo: como ler 10 valores e encontrar o menor
número? Nós sabemos que devemos ler 10 valores, ou seja, repetir 10
vezes o scanf. Podemos então utilizar uma construção muito similar com
o exemplo anterior. *[Passar Slide/Transição]* Definimos i, o contador
de quantos números foram lidos, atribuímos i à 0 no comando de
inicialização, afinal foram lidos 0 números até agora. Então, devemos
executar a leitura apenas 10 vezes, ou seja, nossa expressão de teste
é enquanto i for menor que 10, incrementado i de um em um no comando
de atualização. *[Passar Slide]*

*** DONE Slide 8:
Aqui fica um alerta, por que utilizar 'menor que' e não 'menor ou
igual' a 10?  Na primeira vez que o bloco é executado, a variável i
tem o valor 0, na segunda vez é 1, e na décima vez, i terá o valor
a 9. Se utilizássemos 'menor ou igual', teríamos 11 vezes, já que a
vez que i é igual a 0 é a primeira. Podemos iniciar i com 1 e utilizar
'menor ou igual', que teríamos o mesmo efeito de executar o bloco 10
vezes. *[Passar Slide]*

*** DONE Slide 9:
Agora, definimos então nosso bloco de código, que será a leitura de
uma variável, que vamos chamar de ~valor_lido~. Nosso código agora lê 10
números. Como achar o menor? Podemos ir guardando o menor valor, e
comparar com o valor recém lido, se este valor lido for menor que o
menor valor armazenado, substituímos ele. *[Passar Slide/Transição]*
Dessa forma, definimos a variável ~menor_valor~ antes do nosso for,
contendo o maior valor possível do inteiro. Para isso adicionamos a
biblioteca ~limits.h~ e utilizamos a macro ~INT_MAX~. *[Passar
Slide/Transição]* Agora, no nosso código dentro do for, realizamos uma
comparação com o if para verificar se o ~valor_lido~ é menor que a
variável ~menor_valor~. Caso verdadeiro, atualizamos o valor desta
variável. *[Passar Slide/Transição]* Depois de ler 10 valores e o
comando for acabar, podemos imprimir a variável ~menor_valor~. Assim,
nosso exemplo está concluído. *[Passar Slide]*
*** DONE Slide 10:
- Nesta video-aula foi apresentado o comando de repetição for
- [Dar um tchau simpático]
- [Terminar apresentação]

* Repetição While (Isso abrange os tópicos N=13..14 [Semana 5])
** Estrutura
Motivação: Repetir código considerando uma condição qualquer
** Roteiro
*** Setup
#+BEGIN_SRC emacs-lisp
;;http://pragmaticemacs.com/emacs/scrolling-and-moving-by-line/
;;keep cursor at same position when scrolling
(setq scroll-preserve-screen-position 1)
;;scroll window up/down by one line
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+END_SRC

#+RESULTS:
: [21 49 134217846]

*** Slide 0:
- [Apresentar-se]
- Nesta video-aula será apresentado o comando de repetição While
- [Passar Slide]
*** Slide 1:
Neste momento do curso, vocês já sabem a estrutura de um programa em
C. o comando de seleção IF e o comando de repetição FOR. Entretanto,
existe outro comando de repetição, que permite a repetição verificando
apenas uma expressão de teste. *[Passar Slide]*
*** Slide 2:
A repetição de código é uma etapa fundamental para a automatização.
Vimos na última aula o comando for com seus três componentes: o
comando de inicialização, a expressão de teste, e o comando de
atualização. O comando WHILE, assunto desta video-aula, permite a
repetição de código enquanto uma condição for verdadeira, sem a
necessidade de comandos de inicialização ou de atualização.  *[Passar
Slide]*
*** Slide 3:
O comando de repetição while do C é composto por: a palavra-chave
while seguido por parênteses. Dentro dos parenteses temos somente a
expressão de teste, e finalmente o bloco de código que vai ser
repetido. *[Passar Slide]*
*** Slide 4 e 5
Um exemplo da utilização do while é realizar leituras enquanto
possível, isso é, até o usuário informar o fim delas. Vocês já sabem
ler uma variável com o scanf. E lembrando bem, o scanf retorna a
quantidade de elementos lidos. Se precisarmos ler uma quantidade
desconhecida de números, por exemplo, até o usuário informar o fim,
podemos utilizar o laço de repetição while. Para o usuário informar o
fim de uma leitura, ele pode passar o sinal EOF, de End-Of-File,
Obtido pela combinação Control+D. Quando o scanf recebe um EOF, ele
entende que não há mais nada para ler, e retorna o valor EOF. Para ler
uma quantidade indeterminada de números, podemos ler até scanf
retornar EOF. Nosso exemplo será o seguinte: ler números e imprimi-los
até o usuário determinar o End-Of-File. Declaramos uma variável para o
valor lido. *[Passar Slide/Transição]* Abrimos um comando while, sendo
que a nossa condição é enquanto o retorno de scanf for diferente de
EOF. Caso algo seja lido, nosso bloco de código é imprimir o valor da
variável. Assim, quando o programa chegar no while, ele vai executar a
função scanf para verificar a expressão, se o usuário digitar um
número, scanf vai ler ele, atribuir para variável, e vai retornar 1. O
valor 1 é diferente de EOF, então o bloco de código é executado. E o
teste da condição se repete. Se o usuário informar EOF, scanf retorna
EOF, e a condição fica falsa, o comando while é interrompido e o
programa segue seu fluxo. Ainda, existe uma variação do while que
sempre executa o bloco na primeira vez, o comando "do while". *[Passar
Slide]*
*** Slide 6:
O comando de repetição "do while" do C é comporto pela palavra-chave
DO, seguido pelo bloco de código a ser executado, pela palavra-chave
WHILE com a expressão de teste entre parênteses. Neste comando "do
while", o bloco é sempre executado na primeira vez, e vai sendo
repetido se ao final dele, a expressão de teste for
verdadeira. *[Passar Slide]*
*** Slide 7: 
Um exemplo da utilização do comando "do while" é o seguinte. Vamos ler
números enquanto estes forem pares. Quando o usuário passar um número
ímpar, nós imprimimos "Impar" e encerramos o programa. *[Passar
Slide/Transição]* Para isso, novamente utilizamos um scanf de uma
variável, chamada valor. *[Passar Slide/Transição]* Como sempre devemos
ler o primeiro número, o comando "do while" faz sentido, porque nosso
bloco sempre é executado na primeira vez. *[Passar Slide/Transição]*
Nosso bloco de código é a leitura do número, *[Passar Slide/Transição]*
e nossa condição de teste é verificação se a variável é par, com uso
da expressão resto (%) de uma divisão inteira, neste caso da divisão
por dois. Durante a execução do programa, ele chega no bloco do "do",
e vai executar. Dependendo da entrada do usuário no scanf, ele pode ou
não repetir o bloco. *[Passar Slide]*
*** Slide 8:
Qualquer repetição de código que você deseja realizar, pode ser
escrito com for, while ou "do while". Entretendo, o que muda é a
legibilidade de código. É indicado a utilização do for para a
realização de repetições de iterações quando temos uma quantidade
máxima delas, incrementado um número de controle até um limite. Já o
while, permite a repetição simplesmente enquanto uma condição for
verdadeira. A variação "do while", difere já que sempre executa o
bloco pelo menos uma vez. *[Passar Slide]*
*** Slide 9:
- Nesta video-aula foi apresentado o comando de repetição while
- [Dar um tchau simpático]
- [Terminar apresentação]
* Arranjos unidimensionais e Strings (Isso abrange os tópicos N=15..17 [Semana 6])
* Arranjos multidimensionais (matrizes) (Isso abrange os tópicos N=18..19 [Semana 7])   
* Macro                                                            :noexport:
#+begin_src emacs-lisp
(defun get-selected-text (start end)
    (interactive "r")
(kill-new
      (replace-regexp-in-string "\n" " "
      (if (use-region-p)
        (let ((regionp (buffer-substring start end)))
            (message regionp))))
  )
)

(global-set-key (kbd "<f9>") 'get-selected-text)

#+end_src

#+RESULTS:
: get-selected-text
** Emacs image original size
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src

#+RESULTS:

** Open pngs
#+begin_src emacs-lisp
(require 'openwith)
(openwith-mode t)
(setq openwith-associations '(("\\.png\\'" "eog" (file))))
#+end_src

#+RESULTS:
| \.png\' | eog | (file) |

* Emacs setup                                                      :noexport:
# Local Variables:
# eval: (add-to-list 'load-path ".")
# eval: (require 'ox-extra)
# eval: (require 'org-inlinetask)
# eval: (ox-extras-activate '(ignore-headlines))
# eval: (setq ispell-local-dictionary "brasileiro")
# eval: (setq org-startup-with-inline-images nil)
# eval: (setq org-image-actual-width nil)
# eval: (eval (flyspell-mode t))
# eval: (add-to-list 'org-latex-classes '("IEEEtran"
# "\\documentclass{IEEEtran}" ("\\section{%s}" . "\\section*{%s}")
# ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}"
# . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}")  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
# End:
